# stolen from https://github.com/haskell-CI/haskell-ci/blob/master/.github/workflows/haskell-ci.yml

name: Haskell CI

on:
  push:
  pull_request:
    branches: [ master ]

jobs:
  linux:
    name: Haskell-CI - Linux - ${{ matrix.compiler }}
    runs-on: ubuntu-20.04
    container:
      image: buildpack-deps:focal
    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        include:
          - compiler: ghc-9.4.7-vanilla
            projectFlags:
            compilerKind: ghc
            compilerVersion: 9.4.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.4.7-asserts
            projectFlags: -fwith_expensive_assertions
            compilerKind: ghc
            compilerVersion: 9.4.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.4.7-norelease-asserts
            projectFlags: -f-release -fwith_expensive_assertions
            compilerKind: ghc
            compilerVersion: 9.4.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.4.7-noopt
            projectFlags: --ghc-option=-O0 --ghc-option=-fno-ignore-asserts
            compilerKind: ghc
            compilerVersion: 9.4.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.4.7-opt2
            projectFlags: --ghc-option=-O2 --ghc-option=-fno-ignore-asserts
            compilerKind: ghc
            compilerVersion: 9.4.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.2.8-vanilla
            projectFlags:
            compilerKind: ghc
            compilerVersion: 9.2.8
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.2.8-asserts
            projectFlags: -fwith_expensive_assertions
            compilerKind: ghc
            compilerVersion: 9.2.8
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.2.8-norelease-asserts
            projectFlags: -f-release -fwith_expensive_assertions
            compilerKind: ghc
            compilerVersion: 9.2.8
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.2.8-noopt
            projectFlags: --ghc-option=-O0 --ghc-option=-fno-ignore-asserts
            compilerKind: ghc
            compilerVersion: 9.2.8
            setup-method: ghcup
            allow-failure: false
#OOM          - compiler: ghc-9.2.8-opt2
#            projectFlags: --ghc-option=-O2 --ghc-option=-fno-ignore-asserts
#            compilerKind: ghc
#            compilerVersion: 9.2.8
#            setup-method: ghcup
#            allow-failure: false
          - compiler: ghc-9.0.2-vanilla
            projectFlags:
            compilerKind: ghc
            compilerVersion: 9.0.2
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.0.2-asserts
            projectFlags: -fwith_expensive_assertions
            compilerKind: ghc
            compilerVersion: 9.0.2
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.0.2-norelease-asserts
            projectFlags: -f-release -fwith_expensive_assertions
            compilerKind: ghc
            compilerVersion: 9.0.2
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.0.2-noopt
            projectFlags: --ghc-option=-O0 --ghc-option=-fno-ignore-asserts
            compilerKind: ghc
            compilerVersion: 9.0.2
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.0.2-opt2
            projectFlags: --ghc-option=-O2 --ghc-option=-fno-ignore-asserts
            compilerKind: ghc
            compilerVersion: 9.0.2
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-8.10.7-vanilla
            projectFlags:
            compilerKind: ghc
            compilerVersion: 8.10.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-8.10.7-asserts
            projectFlags: -fwith_expensive_assertions
            compilerKind: ghc
            compilerVersion: 8.10.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-8.10.7-norelease-asserts
            projectFlags: -f-release -fwith_expensive_assertions
            compilerKind: ghc
            compilerVersion: 8.10.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-8.10.7-noopt
            projectFlags: --ghc-option=-O0 --ghc-option=-fno-ignore-asserts
            compilerKind: ghc
            compilerVersion: 8.10.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-8.10.7-opt2
            projectFlags: --ghc-option=-O2 --ghc-option=-fno-ignore-asserts
            compilerKind: ghc
            compilerVersion: 8.10.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-8.8.4-vanilla
            projectFlags:
            compilerKind: ghc
            compilerVersion: 8.8.4
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-8.8.4-asserts
            projectFlags: -fwith_expensive_assertions
            compilerKind: ghc
            compilerVersion: 8.8.4
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-8.8.4-norelease-asserts
            projectFlags: -f-release -fwith_expensive_assertions
            compilerKind: ghc
            compilerVersion: 8.8.4
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-8.8.4-noopt
            projectFlags: --ghc-option=-O0 --ghc-option=-fno-ignore-asserts
            compilerKind: ghc
            compilerVersion: 8.8.4
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-8.8.4-opt2
            projectFlags: --ghc-option=-O2 --ghc-option=-fno-ignore-asserts
            compilerKind: ghc
            compilerVersion: 8.8.4
            setup-method: hvr-ppa
            allow-failure: false
      fail-fast: false
    steps:
      - name: apt
        run: |
          apt-get update
          apt-get install -y --no-install-recommends gnupg ca-certificates dirmngr curl git software-properties-common libtinfo5 libsdl2-ttf-dev
          if [ "${{ matrix.setup-method }}" = ghcup ]; then
            mkdir -p "$HOME/.ghcup/bin"
            curl -sL https://downloads.haskell.org/ghcup/0.1.18.0/x86_64-linux-ghcup-0.1.18.0 > "$HOME/.ghcup/bin/ghcup"
            chmod a+x "$HOME/.ghcup/bin/ghcup"
            "$HOME/.ghcup/bin/ghcup" install ghc "$HCVER"
            "$HOME/.ghcup/bin/ghcup" install cabal 3.8.1.0
          else
            apt-add-repository -y 'ppa:hvr/ghc'
            apt-get update
            apt-get install -y "$HCKIND"-"$HCVER" cabal-install-3.4
          fi
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
      - name: Set PATH and environment variables
        run: |
          HCDIR=/opt/$HCKIND/$HCVER
          echo "$HOME/.cabal/bin:$HOME/.ghcup/bin:/opt/cabal/3.4/bin:$HCDIR/bin" >> $GITHUB_PATH
          echo "LANG=C.UTF-8" >> "$GITHUB_ENV"
          echo "CABAL_DIR=$HOME/.cabal" >> "$GITHUB_ENV"
          echo "CABAL_CONFIG=$HOME/.cabal/config" >> "$GITHUB_ENV"
          if [ "${{ matrix.setup-method }}" = ghcup ]; then
            HC=$HOME/.ghcup/bin/$HCKIND-$HCVER
            cp $HC $HOME/.ghcup/bin/$HCKIND
            cp $HOME/.ghcup/bin/$HCKIND-pkg-$HCVER $HOME/.ghcup/bin/$HCKIND-pkg
            echo "HC=$HC" >> "$GITHUB_ENV"
            echo "HCPKG=$HOME/.ghcup/bin/$HCKIND-pkg-$HCVER" >> "$GITHUB_ENV"
            echo "HADDOCK=$HOME/.ghcup/bin/haddock-$HCVER" >> "$GITHUB_ENV"
            echo "CABAL=$HOME/.ghcup/bin/cabal-3.8.1.0 -vnormal+nowrap" >> "$GITHUB_ENV"
          else
            HC=$HCDIR/bin/$HCKIND
            echo "HC=$HC" >> "$GITHUB_ENV"
            echo "HCPKG=$HCDIR/bin/$HCKIND-pkg" >> "$GITHUB_ENV"
            echo "HADDOCK=$HCDIR/bin/haddock" >> "$GITHUB_ENV"
            echo "CABAL=/opt/cabal/3.4/bin/cabal -vnormal+nowrap" >> "$GITHUB_ENV"
          fi
          HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\d+)\.(\d+)\.(\d+)(\.(\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')
          echo "HCNUMVER=$HCNUMVER" >> "$GITHUB_ENV"
          echo "ARG_TESTS=--enable-tests" >> "$GITHUB_ENV"
          echo "ARG_BENCH=--enable-benchmarks" >> "$GITHUB_ENV"
          if [ $((HCNUMVER > 90300)) -ne 0 ] ; then echo "HEADHACKAGE=true" >> "$GITHUB_ENV" ; else echo "HEADHACKAGE=false" >> "$GITHUB_ENV" ; fi
          echo "ARG_COMPILER_TOOL=--$HCKIND --with-compiler=$HC" >> "$GITHUB_ENV"
          echo "ARG_COMPILER=$HCFLAGS --$HCKIND --with-compiler=$HC" >> "$GITHUB_ENV"
          echo "GHCJSARITH=0" >> "$GITHUB_ENV"
          echo "MY_HCFLAGS=$HCFLAGS" >> "$GITHUB_ENV"
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
          HCFLAGS: ${{ matrix.projectFlags }}
      - name: env
        run: |
          env
      - name: write cabal config
        run: |
          mkdir -p $CABAL_DIR
          cat >> $CABAL_CONFIG <<EOF
          remote-build-reporting: anonymous
          write-ghc-environment-files: never
          remote-repo-cache: $CABAL_DIR/packages
          logs-dir:          $CABAL_DIR/logs
          world-file:        $CABAL_DIR/world
          extra-prog-path:   $CABAL_DIR/bin
          symlink-bindir:    $CABAL_DIR/bin
          installdir:        $CABAL_DIR/bin
          build-summary:     $CABAL_DIR/logs/build.log
          store-dir:         $CABAL_DIR/store
          install-dirs user
            prefix: $CABAL_DIR
          repository hackage.haskell.org
            url: http://hackage.haskell.org/
          EOF
          if $HEADHACKAGE; then
          cat >> $CABAL_CONFIG <<EOF
          repository head.hackage.ghc.haskell.org
             url: https://ghc.gitlab.haskell.org/head.hackage/
             secure: True
             root-keys: 7541f32a4ccca4f97aea3b22f5e593ba2c0267546016b992dfadcd2fe944e55d
                        26021a13b401500c8eb2761ca95c61f2d625bfef951b939a8124ed12ecf07329
                        f76d08be13e9a61a377a85e2fb63f4c5435d40f8feb3e12eb05905edb8cdea89
             key-threshold: 3
          EOF
          fi
          cat $CABAL_CONFIG
      - name: versions
        run: |
          $HC --version || true
          $HC --print-project-git-commit-id || true
          $CABAL --version || true
          pkg-config --modversion sdl2
      - name: update cabal index
        run: |
          $CABAL v2-update -v
      - name: cache (tools)
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.compilerVersion }}-tools-803c0a4b
          path: ~/.haskell-ci-tools
          restore-keys: ${{ runner.os }}-${{ matrix.compilerVersion }}-tools-803c0a4b
      - name: install doctest
        run: |
          if [ $((HCNUMVER < 90200)) -ne 0 ] ; then
            case $MY_HCFLAGS in --ghc-option=-O*) : ;;
              *)
                $CABAL --store-dir=$HOME/.haskell-ci-tools/store v2-install $ARG_COMPILER_TOOL --ignore-project -j2 doctest --constraint='doctest ^>=0.20'
            esac
          fi
      - name: install hlint
        run: |
          if [ $((HCNUMVER >= 90200 && HCNUMVER < 90300)) -ne 0 ] ; then
            case $MY_HCFLAGS in -f-release*)
              $CABAL --store-dir=$HOME/.haskell-ci-tools/store v2-install $ARG_COMPILER --ignore-project -j2 hlint
              hlint --version
            esac
          fi
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: source
      - name: initial cabal.project for sdist
        run: |
          touch cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/." >> cabal.project
          cat cabal.project
      - name: sdist
        run: |
          mkdir -p sdist
          $CABAL sdist all --output-dir $GITHUB_WORKSPACE/sdist
      - name: unpack
        run: |
          mkdir -p unpacked
          find sdist -maxdepth 1 -type f -name '*.tar.gz' -exec tar -C $GITHUB_WORKSPACE/unpacked -xzvf {} \;
      - name: generate cabal.project
        run: |
          PKGDIR_haskell_ci="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/LambdaHack-[0-9.]*')"
          echo "PKGDIR_haskell_ci=${PKGDIR_haskell_ci}" >> "$GITHUB_ENV"
          tail -n +5 ${PKGDIR_haskell_ci}/cabal.project > cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/." >> cabal.project
          if $HEADHACKAGE; then
            echo "allow-newer: $($HCPKG list --simple-output | sed -E 's/([a-zA-Z-]+)-[0-9.]+/*:\1,/g')" >> cabal.project
          fi
          echo "package sdl2" >> cabal.project
          echo "    flags: +no-linear -recent-ish" >> cabal.project
          cat cabal.project
      - name: cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}--${{ github.sha }}
          path: ~/.cabal/store
          restore-keys: ${{ runner.os }}-${{ matrix.compiler }}--
      - name: install dependencies
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dependencies-only -j2 all
      - name: build w/o tests
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: build
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --write-ghc-environment-files=always
      - name: tests
        run: |
          $CABAL v2-test $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --test-show-details=direct
          if [ $((HCNUMVER < 90200)) -ne 0 ] ; then
            case $MY_HCFLAGS in --ghc-option=-O*) : ;;
              *)
                $CABAL repl --build-depends=QuickCheck --build-depends=template-haskell --with-ghc=doctest lib:LambdaHack
            esac
          fi
      - name: gameplay tests
        shell: 'script -q -e -c "bash --noprofile --norc -eo pipefail {0}"'
        run: |
          make -f ${PKGDIR_haskell_ci}/Makefile test-gha || (tail -n 2000 /tmp/teletypetest.log ; exit 77)
      - name: hlint
        run: |
          if [ $((HCNUMVER >= 90200 && HCNUMVER < 90300)) -ne 0 ] ; then
            case $MY_HCFLAGS in -f-release*)
              (cd ${PKGDIR_haskell_ci} && hlint -h ${GITHUB_WORKSPACE}/source/.hlint.yaml .)
            esac
          fi
      - name: cabal check
        run: |
          cd ${PKGDIR_haskell_ci} || false
          ${CABAL} -vnormal check
      - name: prepare artifact
        run: |
          (cd ${PKGDIR_haskell_ci} && make copy-directory)
          mv ${PKGDIR_haskell_ci}/LambdaHackTheGame .
          make -f ${PKGDIR_haskell_ci}/Makefile copy-binary
      - uses: actions/upload-artifact@v2
        with:
          name: LambdaHack-on-Linux-${{ matrix.compiler }}
          path: LambdaHackTheGame/
      - name: haddock
        run: |
          $CABAL v2-haddock $ARG_COMPILER --with-haddock $HADDOCK $ARG_TESTS $ARG_BENCH all
