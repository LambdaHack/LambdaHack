environment:
  matrix:
    - goal: artifact32and64
      build32: true
      build64: true
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    - goal: test
      build32: true
      build64: false
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    - goal: test
      build32: true
      build64: false
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    - goal: test
      build32: true
      build64: false
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    - goal: test
      build32: true
      build64: false
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    - goal: test
      build32: false
      build64: true
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019

cache:
  - C:\Users\appveyor\AppData\Roaming\cabal -> appveyor.yml
  - C:\Users\appveyor\AppData\Roaming\ghc -> appveyor.yml

install:
  - SET OLDPATH=%PATH%
  - SET PATH=%APPDATA%\cabal\bin;C:\msys64\mingw64\bin;C:\msys64\usr\bin;C:\ProgramData\chocolatey\lib\ghc\tools\ghc-8.4.4\bin;C:\ProgramData\chocolatey\lib\cabal\tools;%PATH%
  - git clone -q --branch=master https://github.com/haskell-game/sdl2
  - IF "true"=="true" (
      choco install cabal --version 2.4.1.0
      && choco install ghc --version 8.4.4 | grep -v '^Extracting the last GHC that works on Windows Vista'
      && SET PKG_CONFIG_PATH=C:\msys64\mingw64\lib\pkgconfig
      && SET XDG_DATA_DIRS=C:\msys64\mingw64\share
      && which cabal
      && cabal --version
      && cabal clean
      && curl -O https://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-SDL2-2.0.14-2-any.pkg.tar.zst
      && pacman -U --noconfirm mingw-w64-x86_64-SDL2-2.0.14-2-any.pkg.tar.zst
      && pacman -S -q --noconfirm mingw64/mingw-w64-x86_64-pkg-config mingw64/mingw-w64-x86_64-SDL2_ttf
      && cabal update
      && cabal v1-install --force-reinstalls happy
    )
  - IF "%build64%"=="true" (
      cd sdl2
      && cabal v1-install --force-reinstalls -fno-linear
      && cd ..
      && pwd
      && (make build-binary-common & make build-binary-common)
      && cp /c/msys64/mingw64/bin/zlib1.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/SDL2.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/SDL2_ttf.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libfreetype-6.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libgcc_s_seh-1.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libbz2-1.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libpng16-16.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libwinpthread-1.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libharfbuzz-0.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libglib-2.0-0.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libgraphite2.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libintl-8.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libpcre-1.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libstdc++-6.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libiconv-2.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libbrotlicommon.dll LambdaHackTheGame
      && cp /c/msys64/mingw64/bin/libbrotlidec.dll LambdaHackTheGame
      && cp LambdaHackTheGameInstall/Users/appveyor/AppData/Roaming/cabal/bin/LambdaHack.exe LambdaHackTheGame
    )

  - IF "%goal%"=="artifact32and64" (
      LambdaHackTheGame\LambdaHack --version
      && SET /p LH_VERSION=<%APPDATA%\LambdaHack\stdout.txt
      && 7z a -ssc -tzip LambdaHack_dev_windows-x86_64.zip LambdaHackTheGame
    )

  - ps: if ($env:goal -eq "artifact32and64") { $env:TIME_STRING=(get-date -UFormat "%Y-%m-%d").ToString() }
  - ps: if ($env:goal -eq "artifact32and64") { Push-AppveyorArtifact LambdaHack_dev_windows-x86_64.zip -FileName "LambdaHack_$($env:LH_VERSION)-dev-$($env:TIME_STRING)_windows-x86_64.zip" -DeploymentName "win64 binaries archive" }

  - IF "%goal%"=="artifact32and64" (
      cp Makefile LambdaHackTheGame
      && mv LambdaHackTheGame LambdaHackTheGame64
      && rm -rf LambdaHackTheGameInstall
    )

  - SET PATH=%APPDATA%\cabal\bin;C:\msys64\mingw32\bin;C:\msys64\usr\bin;C:\ProgramData\chocolatey\lib\ghc\tools\ghc-8.4.4\bin;C:\ProgramData\chocolatey\lib\cabal\tools;%PATH%

  - IF "%build32%"=="true" (
      cabal clean
      && cd sdl2
      && cabal clean
      && rm -rf dist
      && cd ..
    )

  - IF "%build32%"=="true" (
      choco install --force --forcex86 ghc --version 8.4.4 | grep -v '^Extracting '
      && SET PKG_CONFIG_PATH=C:\msys64\mingw32\lib\pkgconfig
      && SET XDG_DATA_DIRS=C:\msys64\mingw32\share
      && cabal --version
      && cabal clean
      && pacman -S -q --noconfirm mingw-w64-i686-pkg-config mingw-w64-i686-SDL2 mingw-w64-i686-SDL2_ttf
      && (IF NOT "true"=="true" cabal update)
      && (IF NOT "true"=="true" cabal v1-install --force-reinstalls happy)
      && cd sdl2
      && cabal v1-install --force-reinstalls -fno-linear
      && cd ..
      && pwd
      && (make build-binary-common & make build-binary-common)
      && cp /c/msys64/mingw32/bin/zlib1.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/SDL2.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/SDL2_ttf.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libfreetype-6.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libgcc_s_dw2-1.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libbz2-1.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libpng16-16.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libwinpthread-1.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libharfbuzz-0.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libglib-2.0-0.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libgraphite2.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libintl-8.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libpcre-1.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libstdc++-6.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libiconv-2.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libbrotlicommon.dll LambdaHackTheGame
      && cp /c/msys64/mingw32/bin/libbrotlidec.dll LambdaHackTheGame
      && cp LambdaHackTheGameInstall/Users/appveyor/AppData/Roaming/cabal/bin/LambdaHack.exe LambdaHackTheGame
    )

  - IF "%goal%"=="artifact32and64" (
      7z a -ssc -tzip LambdaHack_dev_windows-i686.zip LambdaHackTheGame
    )

  - ps: if ($env:goal -eq "artifact32and64") { Push-AppveyorArtifact LambdaHack_dev_windows-i686.zip -FileName "LambdaHack_$($env:LH_VERSION)-dev-$($env:TIME_STRING)_windows-i686.zip" -DeploymentName "win32 binaries archive" }

  - IF "%goal%"=="artifact32and64" mv LambdaHackTheGame LambdaHackTheGame32

  - ps: if ($env:goal -eq "artifact32and64") { C:\"Program Files (x86)"\NSIS\makensis.exe .windows.installer.nsi }
  - ps: if ($env:goal -eq "artifact32and64") { Push-AppveyorArtifact LambdaHack_dev_windows-installer.exe -FileName "LambdaHack_$($env:LH_VERSION)-dev-$($env:TIME_STRING)_windows-installer.exe" -DeploymentName "win64 and win32 installer" }

  - SET PATH=C:\msys64\usr\bin;%OLDPATH%

  - IF "%goal%"=="test" (
      cp Makefile LambdaHackTheGame
      && cd LambdaHackTheGame
    )
#  - IF "%goal%"=="test" (
#      make test-short || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
#    )
  - IF "%goal%"=="test" (
      make testCrawl-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testCrawl-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testCrawl-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testCrawl-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testCrawl-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testDefense-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testCrawl-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testCrawl-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testCrawl-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testCrawl-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testCrawl-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      make testDefense-appveyor || (tail -n 200 %APPDATA%\LambdaHack\stderr.txt & tail -n 200 %APPDATA%\LambdaHack\stdout.txt & exit 77)
    )
  - IF "%goal%"=="test" (
      cd ..
    )
  - SET PATH=%APPDATA%\cabal\bin;C:\msys64\mingw32\bin;C:\msys64\usr\bin;C:\ProgramData\chocolatey\lib\ghc\tools\ghc-8.4.4\bin;C:\ProgramData\chocolatey\lib\cabal\tools;%PATH%
  - cabal clean

build: off
