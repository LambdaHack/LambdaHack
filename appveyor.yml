clone_folder: $(SystemDrive)\WORK
clone_depth: 5

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

platform:
  - x86_64
  - x86

environment:
  global:
    StoreDir       : $(SystemDrive)\SR
    CABOPTS        : --store-dir=%StoreDir% --http-transport=plain-http
    CHOCOCMD       : ghc --version %GHCVER%
    Deps           : $(cd)\LambdaHackTheGame
    MSystem        : mingw64
    PKG_CONFIG_PATH: $(SystemDrive):\msys64\%MSystem%\lib\pkgconfig
    XDG_DATA_DIRS  : $(SystemDrive):\msys64\%MSystem%\share
    Arch           : x86_86
    ArchName       : win64
  matrix:
    - GHCVER: 8.6.5

for:
  -
    matrix:
      only:
        - platform: x86
    environment:
      global:
        GHCOPTS : --forcex86
        MSystem : mingw32
        Arch    : i686
        ArchName: win32
matrix:
  # set this flag to immediately finish build once one of the jobs fails.
  fast_finish: true

cache:
  - $(AppData)\cabal -> appveyor.yml
  - $(AppData)\ghc -> appveyor.yml
  - $(StoreDir)

install:
  - choco install %CHOCOCMD% -y %GHCOPTS% %CHOCOPTS% --ignore-dependencies
  - choco install -y cabal %CHOCOPTS%
  - refreshenv
  - mkdir %Deps%
  - set PATH=%Deps%;%PATH%
  - mingw64-pkg install "\"SDL2 --noconfirm\""
  - mingw64-pkg install "\"SDL2_ttf --noconfirm\""

before_build:
  - ghc --version
  - which cabal
  - cabal --version
  - cabal %CABOPTS% v2-update
  - cabal %CABOPTS% v2-install happy
  - cabal %CABOPTS% v2-install sdl2 -fno-linear --lib

build_script:
  - make build-binary-common

before_deploy:
  - cp /c/msys64/%MSystem%/bin/zlib1.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/SDL2.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/SDL2_ttf.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libfreetype-6.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libgcc*.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libbz2-1.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libpng16-16.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libwinpthread-1.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libharfbuzz-0.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libglib-2.0-0.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libgraphite2.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libintl-8.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libpcre-1.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libstdc++-6.dll LambdaHackTheGame
  - cp /c/msys64/%MSystem%/bin/libiconv-2.dll LambdaHackTheGame
  - LambdaHack --version
  - set /p LH_VERSION=<%APPDATA%\LambdaHack\stdout.txt
  - 7z a -ssc -tzip LambdaHack_dev_windows-%Arch%.zip LambdaHackTheGame

deploy_script:
  - ps: $env:TIME_STRING=(get-date -UFormat "%Y-%m-%d").ToString()
  - ps: Push-AppveyorArtifact LambdaHack_dev_windows-$($env:Arch).zip -FileName "LambdaHack_$($env:LH_VERSION)-dev-$($env:TIME_STRING)_windows-$($env:Arch).zip" -DeploymentName "$($env:ArchName) binaries archive"

#  - ps: C:\"Program Files (x86)"\NSIS\makensis.exe .windows.installer.nsi
#  - ps: Push-AppveyorArtifact LambdaHack_dev_windows-installer.exe -FileName "LambdaHack_$($env:LH_VERSION)-dev-$($env:TIME_STRING)_windows-installer.exe" -DeploymentName "win64 and win32 installer" }

test_script:
#  - make test-short || (tail -n 500 %APPDATA%\LambdaHack\stderr.txt & exit 77)
  - make testCrawl-appveyor || (tail -n 500 %APPDATA%\LambdaHack\stderr.txt & exit 77)
  - make testDefense-appveyor || (tail -n 500 %APPDATA%\LambdaHack\stderr.txt & exit 77)
